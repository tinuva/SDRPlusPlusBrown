name: Build Binaries

on:
    push:
        branches:
        - master
    pull_request:
        branches:
        - master

env:
    # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
    BUILD_TYPE: Release
    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:

    build_windows:
        runs-on: windows-latest

        steps:
        - uses: actions/checkout@v4

        - name: Create Build Environment
          run: cmake -E make_directory ${{runner.workspace}}/build

        - name: Download PothosSDR
          run: Invoke-WebRequest -Uri "https://downloads.myriadrf.org/builds/PothosSDR/PothosSDR-2020.01.26-vc14-x64.exe" -OutFile ${{runner.workspace}}/pothos.exe

        - name: Install PothosSDR
          run: mkdir "C:/Program Files/PothosSDR" ; 7z x ${{runner.workspace}}/pothos.exe -o"C:/Program Files/PothosSDR/"

        - name: Download libusb
          run: Invoke-WebRequest -Uri "https://github.com/libusb/libusb/releases/download/v1.0.23/libusb-1.0.23.7z" -OutFile ${{runner.workspace}}/libusb.7z

        - name: Patch Pothos with earlier libusb version
          working-directory: ${{runner.workspace}}
          run: 7z x libusb.7z -olibusb_old ; rm "C:/Program Files/PothosSDR/bin/libusb-1.0.dll" ; cp "libusb_old/MS64/dll/libusb-1.0.dll" "C:/Program Files/PothosSDR/bin/" ; rm "C:/Program Files/PothosSDR/lib/libusb-1.0.lib" ; cp "libusb_old/MS64/dll/libusb-1.0.lib" "C:/Program Files/PothosSDR/lib/"
 
        - name: Download librtlsdr
          run: Invoke-WebRequest -Uri "https://ftp.osmocom.org/binaries/windows/rtl-sdr/rtl-sdr-64bit-20240623.zip" -OutFile ${{runner.workspace}}/rtl-sdr.zip

        - name: Patch Pothos with newer librtlsdr version
          working-directory: ${{runner.workspace}}
          run: 7z x rtl-sdr.zip ; rm "C:/Program Files/PothosSDR/bin/rtlsdr.dll" ; cp "rtl-sdr-64bit-20240623/librtlsdr.dll" "C:/Program Files/PothosSDR/bin/rtlsdr.dll"

        - name: Download SDRPlay API
          run: Invoke-WebRequest -Uri "https://www.sdrpp.org/SDRplay.zip" -OutFile ${{runner.workspace}}/SDRplay.zip

        - name: Install SDRPlay API
          run: 7z x ${{runner.workspace}}/SDRplay.zip -o"C:/Program Files/"

        - name: Download codec2
          run: git clone https://github.com/drowe67/codec2

        - name: Prepare MinGW
          run: C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw64 -c "pacman --noconfirm -S --needed base-devel mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja"

        - name: Prepare build for codec2
          run: cd codec2 ; mkdir build ; cd build ; C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw64 -c "cmake .. -DCMAKE_GNUtoMS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS=-static-libgcc"

        - name: Build codec2
          run: cd codec2/build ; C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw64 -c "ninja"

        - name: Install codec2
          run: mkdir "C:/Program Files/codec2" ; mkdir "C:/Program Files/codec2/include" ; mkdir "C:/Program Files/codec2/include/codec2" ; mkdir "C:/Program Files/codec2/lib" ; cd "codec2" ; xcopy "src" "C:/Program Files/codec2/include" ; cd "build" ; xcopy "src" "C:/Program Files/codec2/lib" ; xcopy "codec2" "C:/Program Files/codec2/include/codec2"

        - name: Install vcpkg dependencies
          run: vcpkg install fftw3:x64-windows glfw3:x64-windows portaudio:x64-windows zstd:x64-windows libusb:x64-windows itpp:x64-windows spdlog:x64-windows

        - name: Install rtaudio
          run: git clone https://github.com/thestk/rtaudio ; cd rtaudio ; git checkout 2f2fca4502d506abc50f6d4473b2836d24cfb1e3 ; mkdir build ; cd build ; cmake .. ; cmake --build . --config Release ; cmake --install .

        - name: Install libperseus-sdr
          run: git clone https://github.com/AlexandreRouma/libperseus-sdr ; cd libperseus-sdr ; mkdir build ; cd build ; cmake -DCMAKE_BUILD_TYPE=Release "-DLIBUSB_LIBRARIES=C:/Program Files/PothosSDR/lib/libusb-1.0.lib" "-DLIBUSB_INCLUDE_DIRS=C:/Program Files/PothosSDR/include/libusb-1.0" .. "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" ; cmake --build . --config Release  ; mkdir "C:/Program Files/PothosSDR/include/perseus-sdr" ; cp Release/perseus-sdr.dll "C:/Program Files/PothosSDR/bin" ; cp Release/perseus-sdr.lib "C:/Program Files/PothosSDR/bin" ; cd .. ; xcopy "src" "C:/Program Files/PothosSDR/include/perseus-sdr"

        - name: Install librfnm
          run: git clone https://github.com/AlexandreRouma/librfnm ; cd librfnm ; mkdir build ; cd build ; cmake .. -DCMAKE_BUILD_TYPE=Release "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" ; cmake --build . --config Release ; cmake --install .

        - name: Install libfobos
          run: git clone https://github.com/AlexandreRouma/libfobos ; cd libfobos ; mkdir build ; cd build ; cmake .. -DCMAKE_BUILD_TYPE=Release "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" ; cmake --build . --config Release ; cmake --install .

        - name: Prepare CMake
          working-directory: ${{runner.workspace}}/build
          run: cmake -DCOPY_MSVC_REDISTRIBUTABLES=ON "$Env:GITHUB_WORKSPACE" "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" -DOPT_BUILD_BLADERF_SOURCE=ON -DOPT_BUILD_LIMESDR_SOURCE=ON -DOPT_BUILD_PERSEUS_SOURCE=ON -DOPT_BUILD_SDRPLAY_SOURCE=ON -DOPT_BUILD_NEW_PORTAUDIO_SINK=ON -DOPT_BUILD_M17_DECODER=ON -DOPT_BUILD_CH_EXTRAVHF_DECODER=ON -DOPT_BUILD_SOAPY_SOURCE=ON -DOPT_BUILD_SDRPLAY_SOURCE=ON -DOPT_BUILD_FOBOSSDR_SOURCE=ON -DOPT_BUILD_RFNM_SOURCE=ON -DOPT_BUILD_MPEG_ADTS_SINK=OFF

        - name: Build
          working-directory: ${{runner.workspace}}/build
          run: cmake --build . --config RelWithDebInfo --verbose

        - name: Create Archive
          working-directory: ${{runner.workspace}}
          run: '&($Env:GITHUB_WORKSPACE + "/make_windows_package.ps1") ./build ($Env:GITHUB_WORKSPACE + "/root")'

        - name: Save Archive
          uses: actions/upload-artifact@v4
          with:
              name: sdrpp_windows_x64
              path: ${{runner.workspace}}/sdrpp_windows_x64.zip

        - name: Update Nightly
          run: gh release upload rolling ${{runner.workspace}}/sdrpp_windows_x64.zip -R ${{github.repository}} --clobber

        - name: Update Stable
          if: contains(github.ref_name, 'stable')
          run: gh release upload stable ${{runner.workspace}}/sdrpp_windows_x64.zip -R ${{github.repository}} --clobber


    build_macos_intel:
      runs-on: macos-13

      steps:
        - uses: actions/checkout@v4

        - name: Create Build Environment
          run: cmake -E make_directory ${{runner.workspace}}/build

        - name: Install dependencies
          run: HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 brew install pkg-config libusb fftw glfw airspy airspyhf portaudio hackrf libbladerf codec2 zstd autoconf automake libtool spdlog && pip3 install mako --break-system-packages

        - name: Install volk
          run: git clone --recursive https://github.com/gnuradio/volk && cd volk && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install SDRplay API
          run: wget https://www.sdrplay.com/software/SDRplayAPI-macos-installer-universal-3.15.0.pkg && sudo installer -pkg SDRplayAPI-macos-installer-universal-3.15.0.pkg -target /

        - name: Install libiio
          run: wget https://github.com/analogdevicesinc/libiio/archive/refs/tags/v0.25.zip && 7z x v0.25.zip && cd libiio-0.25 && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install libad9361
          run: git clone https://github.com/analogdevicesinc/libad9361-iio && cd libad9361-iio && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install LimeSuite
          run: git clone https://github.com/myriadrf/LimeSuite && cd LimeSuite && mkdir builddir && cd builddir && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install librfnm
          run: git clone https://github.com/AlexandreRouma/librfnm && cd librfnm && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release && make && sudo make install && cd ..

        - name: Install libfobos
          run: git clone https://github.com/AlexandreRouma/libfobos && cd libfobos && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release && make && sudo make install && cd ..

        - name: Install more recent librtlsdr
          run: git clone https://github.com/osmocom/rtl-sdr && cd rtl-sdr && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 LIBRARY_PATH=$(pkg-config --libs-only-L libusb-1.0 | sed 's/\-L//') && sudo make install && cd ../../

#        - name: Some debugging
#          run: echo "before" && find /opt/homebrew/Cellar/codec2/1.2.0/include -print && echo "#ifndef CODEC2_HAVE_VERSION\n#define CODEC2_HAVE_VERSION\n#define CODEC2_VERSION_MAJOR 1\n#define CODEC2_VERSION_MINOR 2\n#define CODEC2_VERSION \"1.2.0\"\n#endif\n" > /opt/homebrew/Cellar/codec2/1.2.0/include/codec2/version.h && echo "after"; find /opt/homebrew/Cellar/codec2/1.2.0/include -print
#
        - name: Prepare CMake
          working-directory: ${{runner.workspace}}/build
          run: cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 $GITHUB_WORKSPACE -DOPT_BUILD_PLUTOSDR_SOURCE=ON -DOPT_BUILD_BLADERF_SOURCE=ON -DOPT_BUILD_SDRPLAY_SOURCE=ON -DOPT_BUILD_LIMESDR_SOURCE=ON -DOPT_BUILD_AUDIO_SINK=OFF -DOPT_BUILD_PORTAUDIO_SINK=ON -DOPT_BUILD_NEW_PORTAUDIO_SINK=ON -DOPT_BUILD_M17_DECODER=ON -DOPT_BUILD_PERSEUS_SOURCE=OFF -DOPT_BUILD_AUDIO_SOURCE=OFF -DUSE_BUNDLE_DEFAULTS=ON -DOPT_BUILD_RFNM_SOURCE=ON -DOPT_BUILD_FOBOSSDR_SOURCE=ON -DOPT_BUILD_CH_EXTRAVHF_DECODER=ON -DCMAKE_BUILD_TYPE=Release

        - name: Build
          working-directory: ${{runner.workspace}}/build
          run: make VERBOSE=1 -j3

        - name: Create Archive
          working-directory: ${{runner.workspace}}
          run: cd $GITHUB_WORKSPACE && sh make_macos_bundle.sh ${{runner.workspace}}/build ./SDR++Brown.app && zip -r ${{runner.workspace}}/sdrpp_macos_intel.zip SDR++Brown.app

        - name: Save Archive
          uses: actions/upload-artifact@v4
          with:
            name: sdrpp_macos_intel
            path: ${{runner.workspace}}/sdrpp_macos_intel.zip

        - name: Update Nightly
          run: gh release upload rolling ${{runner.workspace}}/sdrpp_macos_intel.zip -R ${{github.repository}} --clobber

        - name: Update Stable
          if: contains(github.ref_name, 'stable')
          run: gh release upload stable ${{runner.workspace}}/sdrpp_macos_intel.zip -R ${{github.repository}} --clobber





    build_macos_arm:


      runs-on: macos-14

      steps:
        - uses: actions/checkout@v4

        - name: Create Build Environment
          run: cmake -E make_directory ${{runner.workspace}}/build

        - name: Install dependencies
          run: brew install pkg-config libusb fftw glfw airspy airspyhf portaudio hackrf libbladerf codec2 zstd autoconf automake libtool spdlog && pip3 install mako --break-system-packages

        - name: Install volk
          run: git clone --recursive https://github.com/gnuradio/volk && cd volk && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install SDRplay API
          run: wget https://www.sdrplay.com/software/SDRplayAPI-macos-installer-universal-3.15.0.pkg && sudo installer -pkg SDRplayAPI-macos-installer-universal-3.15.0.pkg -target /

        - name: Install libiio
          run: wget https://github.com/analogdevicesinc/libiio/archive/refs/tags/v0.25.zip && 7z x v0.25.zip && cd libiio-0.25 && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install libad9361
          run: git clone https://github.com/analogdevicesinc/libad9361-iio && cd libad9361-iio && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install LimeSuite
          run: git clone https://github.com/myriadrf/LimeSuite && cd LimeSuite && mkdir builddir && cd builddir && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        # - name: Install libperseus
        #   run: git clone https://github.com/Microtelecom/libperseus-sdr && cd libperseus-sdr && autoreconf -i && ./configure --prefix=/usr/local && make && make install && cd ..

        - name: Install librfnm
          run: git clone https://github.com/AlexandreRouma/librfnm && cd librfnm && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release && make && sudo make install && cd ..

        - name: Install libfobos
          run: git clone https://github.com/AlexandreRouma/libfobos && cd libfobos && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release && make && sudo make install && cd ..

        - name: Install more recent librtlsdr
          run: git clone https://github.com/osmocom/rtl-sdr && cd rtl-sdr && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 LIBRARY_PATH=$(pkg-config --libs-only-L libusb-1.0 | sed 's/\-L//') && sudo make install && cd ../../

        - name: Prepare CMake
          working-directory: ${{runner.workspace}}/build
          run: cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 $GITHUB_WORKSPACE -DOPT_BUILD_PLUTOSDR_SOURCE=ON -DOPT_BUILD_BLADERF_SOURCE=ON -DOPT_BUILD_SDRPLAY_SOURCE=ON -DOPT_BUILD_LIMESDR_SOURCE=ON -DOPT_BUILD_AUDIO_SINK=OFF -DOPT_BUILD_PORTAUDIO_SINK=ON -DOPT_BUILD_NEW_PORTAUDIO_SINK=ON -DOPT_BUILD_M17_DECODER=OFF -DOPT_BUILD_PERSEUS_SOURCE=OFF -DOPT_BUILD_AUDIO_SOURCE=OFF -DUSE_BUNDLE_DEFAULTS=ON  -DOPT_BUILD_RFNM_SOURCE=ON -DOPT_BUILD_FOBOSSDR_SOURCE=ON -DOPT_BUILD_CH_EXTRAVHF_DECODER=ON -DCMAKE_BUILD_TYPE=Release

        - name: Build
          working-directory: ${{runner.workspace}}/build
          run: make VERBOSE=1 -j3

        - name: Create Archive
          working-directory: ${{runner.workspace}}
          run: cd $GITHUB_WORKSPACE && sh make_macos_bundle.sh ${{runner.workspace}}/build ./SDR++Brown.app && zip -r ${{runner.workspace}}/sdrpp_macos_arm.zip SDR++Brown.app

        - name: Save Archive
          uses: actions/upload-artifact@v4
          with:
            name: sdrpp_macos_arm
            path: ${{runner.workspace}}/sdrpp_macos_arm.zip

        - name: Update Nightly
          run: gh release upload rolling ${{runner.workspace}}/sdrpp_macos_arm.zip -R ${{github.repository}} --clobber

        - name: Update Stable
          if: contains(github.ref_name, 'stable')
          run: gh release upload stable ${{runner.workspace}}/sdrpp_macos_arm.zip -R ${{github.repository}} --clobber


    build_debian_buster:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v4

        - name: Create Docker Image
          run: cd $GITHUB_WORKSPACE/docker_builds/debian_buster && docker build . --tag sdrpp_build

        - name: Run Container
          run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

        - name: Recover Deb Archive
          working-directory: ${{runner.workspace}}
          run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./sdrpp_debian_buster_amd64.deb

        - name: Update Nightly
          run: gh release upload rolling ${{runner.workspace}}/sdrpp_debian_buster_amd64.deb -R ${{github.repository}} --clobber

        - name: Update Stable
          if: contains(github.ref_name, 'stable')
          run: gh release upload stable ${{runner.workspace}}/sdrpp_debian_buster_amd64.deb -R ${{github.repository}} --clobber

    build_debian_bullseye:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v4

        - name: Create Docker Image
          run: cd $GITHUB_WORKSPACE/docker_builds/debian_bullseye && docker build . --tag sdrpp_build

        - name: Run Container
          run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

        - name: Recover Deb Archive
          working-directory: ${{runner.workspace}}
          run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./sdrpp_debian_bullseye_amd64.deb

        - name: Update Nightly
          run: gh release upload rolling ${{runner.workspace}}/sdrpp_debian_bullseye_amd64.deb -R ${{github.repository}} --clobber
        - name: Update Stable
          if: contains(github.ref_name, 'stable')
          run: gh release upload stable ${{runner.workspace}}/sdrpp_debian_bullseye_amd64.deb -R ${{github.repository}} --clobber

    build_debian_bookworm:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v4
        - name: Create Docker Image
          run: cd $GITHUB_WORKSPACE/docker_builds/debian_bookworm && docker build . --tag sdrpp_build

        - name: Run Container
          run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

        - name: Recover Deb Archive
          working-directory: ${{runner.workspace}}
          run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./sdrpp_debian_bookworm_amd64.deb

        - name: Save Deb Archive
          uses: actions/upload-artifact@v4
          with:
            name: sdrpp_debian_bookworm_amd64
            path: ${{runner.workspace}}/sdrpp_debian_bookworm_amd64.deb

        - name: Update Nightly
          run: gh release upload rolling ${{runner.workspace}}/sdrpp_debian_bookworm_amd64.deb -R ${{github.repository}} --clobber
        - name: Update Stable
          if: contains(github.ref_name, 'stable')
          run: gh release upload stable ${{runner.workspace}}/sdrpp_debian_bookworm_amd64.deb -R ${{github.repository}} --clobber

    build_debian_bookworm_aarch64:
       runs-on: ubuntu-24.04-arm
     
       steps:
       - uses: actions/checkout@v4
         
       - name: Create Docker Image
         run: cd $GITHUB_WORKSPACE/docker_builds/debian_bookworm && docker build . --tag sdrpp_build
     
       - name: Run Container
         run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh
     
       - name: Recover Deb Archive
         working-directory: ${{runner.workspace}}
         run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./sdrpp_debian_bookworm_aarch64.deb
     
       - name: Save Deb Archive
         uses: actions/upload-artifact@v4
         with:
             name: sdrpp_debian_bookworm_aarch64
             path: ${{runner.workspace}}/sdrpp_debian_bookworm_aarch64.deb
    
       - name: Update Nightly
         run: gh release upload rolling ${{runner.workspace}}/sdrpp_debian_bookworm_aarch64.deb -R ${{github.repository}} --clobber
     
       - name: Update Stable
         if: contains(github.ref_name, 'stable')
         run: gh release upload stable ${{runner.workspace}}/sdrpp_debian_bookworm_aarch64.deb -R ${{github.repository}} --clobber

    build_ubuntu_jammy:

      strategy:
        matrix:
          include:
            # AMD64 (what you already have)
            - arch: amd64
              runner: ubuntu-latest
              deb_name: sdrpp_ubuntu_jammy_amd64.deb
            # ARM64
            - arch: arm64
              runner: ubuntu-22.04-arm   # or ubuntu-24.04-arm
              deb_name: sdrpp_ubuntu_jammy_arm64.deb

      runs-on: ${{ matrix.runner }}

      steps:
        - uses: actions/checkout@v4

        - name: Create Docker Image
          run: cd $GITHUB_WORKSPACE/docker_builds/ubuntu_jammy && docker build . --tag sdrpp_build

        - name: Run Container
          run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

        - name: Recover Deb Archive
          working-directory: ${{runner.workspace}}
          run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_${{matrix.arch}}.deb ./sdrpp_ubuntu_jammy_${{matrix.arch}}.deb

        - name: Save Deb Archive
          uses: actions/upload-artifact@v4
          with:
            name: sdrpp_ubuntu_jammy_${{matrix.arch}}
            path: ${{runner.workspace}}/sdrpp_ubuntu_jammy_${{matrix.arch}}.deb

        - name: Update Nightly
          run: gh release upload rolling ${{runner.workspace}}/sdrpp_ubuntu_jammy_${{matrix.arch}}.deb -R ${{github.repository}} --clobber
        - name: Update Stable
          if: contains(github.ref_name, 'stable')
          run: gh release upload stable ${{runner.workspace}}/sdrpp_ubuntu_jammy_${{matrix.arch}}.deb -R ${{github.repository}} --clobber


    build_ubuntu_noble:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v4

        - name: Create Docker Image
          run: cd $GITHUB_WORKSPACE/docker_builds/ubuntu_noble && docker build . --tag sdrpp_build

        - name: Run Container
          run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

        - name: Recover Deb Archive
          working-directory: ${{runner.workspace}}
          run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./sdrpp_ubuntu_noble_amd64.deb

        - name: Save Deb Archive
          uses: actions/upload-artifact@v4
          with:
              name: sdrpp_ubuntu_noble_amd64
              path: ${{runner.workspace}}/sdrpp_ubuntu_noble_amd64.deb
        - name: Update Nightly
          run: gh release upload rolling ${{runner.workspace}}/sdrpp_ubuntu_noble_amd64.deb -R ${{github.repository}} --clobber
        - name: Update Stable
          if: contains(github.ref_name, 'stable')
          run: gh release upload stable ${{runner.workspace}}/sdrpp_ubuntu_noble_amd64.deb -R ${{github.repository}} --clobber

    build_ubuntu_oracular:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v4
        
        - name: Create Docker Image
          run: cd $GITHUB_WORKSPACE/docker_builds/ubuntu_oracular && docker build . --tag sdrpp_build

        - name: Run Container
          run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

        - name: Recover Deb Archive
          working-directory: ${{runner.workspace}}
          run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

        - name: Save Deb Archive
          uses: actions/upload-artifact@v4
          with:
              name: sdrpp_ubuntu_oracular_amd64
              path: ${{runner.workspace}}/sdrpp_debian_amd64.deb


    build_android:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v4

        - name: Fetch container
          working-directory: ${{runner.workspace}}
          run: git clone https://github.com/sannysanoff/android-sdr-kit

        - name: Build container
          working-directory: ${{runner.workspace}}/android-sdr-kit
          run: docker build --progress=plain -t android-sdr-kit .

        - name: Build
          run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus android-sdr-kit /bin/bash -l -c "cd /root/SDRPlusPlus/android && gradle -PsdrKitRoot=/sdr-kit --info assembleDebug"

        - name: Recover APK
          working-directory: ${{runner.workspace}}
          run: docker cp build:/root/SDRPlusPlus/android/app/build/outputs/apk/debug/app-debug.apk ./ && mv app-debug.apk sdrpp.apk

        - name: Save APK
          uses: actions/upload-artifact@v4
          with:
              name: sdrpp_android
              path: ${{runner.workspace}}/sdrpp.apk

        - name: Update_Nightly
          run:  gh release upload rolling ${{runner.workspace}}/sdrpp.apk -R ${{github.repository}} --clobber

        - name: Update Stable
          if: contains(github.ref_name, 'stable')
          run: gh release upload stable ${{runner.workspace}}/sdrpp.apk -R ${{github.repository}} --clobber

    check_spelling:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v4

        - name: Install codespell
          run: sudo apt update -y && sudo apt install -y codespell

        - name: Running codespell
          run: cd $GITHUB_WORKSPACE && codespell -q 2 || true

    check_formatting:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v4

        - name: Run check_clang_format
          run: cd $GITHUB_WORKSPACE && chmod +x ./check_clang_format.sh && ./check_clang_format.sh || true
